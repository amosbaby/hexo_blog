<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Amos‘s Blog</title>
  
  <link href="/hexo_blog/atom.xml" rel="self"/>
  
  <link href="https://amosbaby.github.io/"/>
  <updated>2016-12-27T09:28:22.000Z</updated>
  <id>https://amosbaby.github.io/</id>
  
  <author>
    <name>Amos Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>swift实现 堆排序</title>
    <link href="https://amosbaby.github.io/2016/12/27/swift%E5%AE%9E%E7%8E%B0-%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    <id>https://amosbaby.github.io/2016/12/27/swift实现-堆排序/</id>
    <published>2016-12-27T09:00:52.000Z</published>
    <updated>2016-12-27T09:28:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>没事儿温习了下堆排序的介绍, 正好在学 swift, 就顺手实现了下,果然手生了,弄了半天才好,做个笔记先</p>
</blockquote>
<p><a href="http://blog.csdn.net/morewindows/article/details/6709644/" target="_blank" rel="external">堆排序讲解传送门</a></p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">func print_result(arr:[Int])&#123;</div><div class="line">    print(arr)</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">/// 调整--建立最大堆</div><div class="line">///</div><div class="line">/// - Parameters:</div><div class="line">///   - heap: 堆数组</div><div class="line">///   - index: 目标下标</div><div class="line">///   - len: 数组长度</div><div class="line">func heap_ajust( heap:inout [Int],index:Int, len:Int)&#123;</div><div class="line">    let left = index  * 2 + 1   //计算左子节点下标</div><div class="line">    let right = left + 1        //计算右子节点下标</div><div class="line">    var largest = index         //记录最大节点下标</div><div class="line">    </div><div class="line">    //在当前节点和其左右子节点 这3个节点中中寻找最大的节点</div><div class="line">    if left &lt; len &amp;&amp; heap[left] &gt; heap[largest] &#123;</div><div class="line">        largest = left</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    if right &lt; len &amp;&amp; heap[right] &gt; heap[largest] &#123;</div><div class="line">        largest = right</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //如果当前节点不是最大节点,那么要和找到的最大节点进行交换</div><div class="line">    if largest != index &#123;</div><div class="line">        </div><div class="line">        let temp = heap[largest]</div><div class="line">        heap[largest] = heap[index]</div><div class="line">        heap[index] = temp</div><div class="line">        </div><div class="line">        //交换后继续根据继续根据最大节点的位置开始调整--此时 largest 应该指向的是当前节点的左右子节点之一</div><div class="line">        heap_ajust(heap: &amp;heap, index: largest, len: len)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    print_result(arr: heap)</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">/// 建立最大堆---从最后一个子节点开始调整最大堆</div><div class="line">///</div><div class="line">/// - Parameters:</div><div class="line">///   - heap: 堆数组</div><div class="line">///   - len: 数组长度</div><div class="line">func build_heap( heap:inout [Int], len:Int)&#123;</div><div class="line">    </div><div class="line">    // 最后一个子节点</div><div class="line">    var last_child = (len - 1)/2</div><div class="line">    </div><div class="line">    while last_child &gt;= 0 &#123;</div><div class="line">         heap_ajust(heap: &amp;heap, index: last_child, len: len)</div><div class="line">        last_child -= 1</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">/// 排序</div><div class="line">///</div><div class="line">/// - Parameters:</div><div class="line">///   - heap: 堆数组</div><div class="line">///   - len: 数组长度</div><div class="line">func sort_heap( heap:inout [Int], len:Int)&#123;</div><div class="line">    </div><div class="line">    //建立最大堆</div><div class="line">    build_heap(heap: &amp;heap, len: len)</div><div class="line">    </div><div class="line">    var index = len - 1</div><div class="line">    </div><div class="line">    </div><div class="line">    //从最后一个元素开始,调整最大堆</div><div class="line">    while index &gt; 0&#123;</div><div class="line">        let temp = heap[index]</div><div class="line">        heap[index] = heap[0]</div><div class="line">        heap[0] = temp</div><div class="line">        </div><div class="line">        heap_ajust(heap: &amp;heap, index: 0, len: index)</div><div class="line">        </div><div class="line">        index -= 1</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var heap = [3,1,5,7,2,4,9,6,10,8]</div><div class="line"></div><div class="line">print_result(arr: heap)</div><div class="line">print(&quot;---------------------------------&quot;)</div><div class="line">sort_heap(heap: &amp;heap, len: heap.count)</div><div class="line">print(&quot;---------------------------------&quot;)</div><div class="line">print_result(arr: heap)</div></pre></td></tr></table></figure>
<p>打印结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">[3, 1, 5, 7, 2, 4, 9, 6, 10, 8]</div><div class="line">---------------------------------</div><div class="line">[3, 1, 5, 7, 8, 4, 9, 6, 10, 2]</div><div class="line">[3, 1, 5, 7, 8, 4, 9, 6, 10, 2]</div><div class="line">[3, 1, 5, 10, 8, 4, 9, 6, 7, 2]</div><div class="line">[3, 1, 5, 10, 8, 4, 9, 6, 7, 2]</div><div class="line">[3, 1, 9, 10, 8, 4, 5, 6, 7, 2]</div><div class="line">[3, 1, 9, 10, 8, 4, 5, 6, 7, 2]</div><div class="line">[3, 10, 9, 7, 8, 4, 5, 6, 1, 2]</div><div class="line">[3, 10, 9, 7, 8, 4, 5, 6, 1, 2]</div><div class="line">[3, 10, 9, 7, 8, 4, 5, 6, 1, 2]</div><div class="line">[10, 8, 9, 7, 3, 4, 5, 6, 1, 2]</div><div class="line">[10, 8, 9, 7, 3, 4, 5, 6, 1, 2]</div><div class="line">[10, 8, 9, 7, 3, 4, 5, 6, 1, 2]</div><div class="line">[9, 8, 5, 7, 3, 4, 2, 6, 1, 10]</div><div class="line">[9, 8, 5, 7, 3, 4, 2, 6, 1, 10]</div><div class="line">[9, 8, 5, 7, 3, 4, 2, 6, 1, 10]</div><div class="line">[8, 7, 5, 6, 3, 4, 2, 1, 9, 10]</div><div class="line">[8, 7, 5, 6, 3, 4, 2, 1, 9, 10]</div><div class="line">[8, 7, 5, 6, 3, 4, 2, 1, 9, 10]</div><div class="line">[8, 7, 5, 6, 3, 4, 2, 1, 9, 10]</div><div class="line">[7, 6, 5, 1, 3, 4, 2, 8, 9, 10]</div><div class="line">[7, 6, 5, 1, 3, 4, 2, 8, 9, 10]</div><div class="line">[7, 6, 5, 1, 3, 4, 2, 8, 9, 10]</div><div class="line">[6, 3, 5, 1, 2, 4, 7, 8, 9, 10]</div><div class="line">[6, 3, 5, 1, 2, 4, 7, 8, 9, 10]</div><div class="line">[6, 3, 5, 1, 2, 4, 7, 8, 9, 10]</div><div class="line">[5, 3, 4, 1, 2, 6, 7, 8, 9, 10]</div><div class="line">[5, 3, 4, 1, 2, 6, 7, 8, 9, 10]</div><div class="line">[4, 3, 2, 1, 5, 6, 7, 8, 9, 10]</div><div class="line">[4, 3, 2, 1, 5, 6, 7, 8, 9, 10]</div><div class="line">[3, 1, 2, 4, 5, 6, 7, 8, 9, 10]</div><div class="line">[3, 1, 2, 4, 5, 6, 7, 8, 9, 10]</div><div class="line">[2, 1, 3, 4, 5, 6, 7, 8, 9, 10]</div><div class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</div><div class="line">---------------------------------</div><div class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;没事儿温习了下堆排序的介绍, 正好在学 swift, 就顺手实现了下,果然手生了,弄了半天才好,做个笔记先&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/morewindows/article/details/6709644/&quot;&gt;堆排序讲解传送门&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="swift,算法,排序,堆排序" scheme="https://amosbaby.github.io/tags/swift-%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>OC UI总结之--tableview相关用法和问题</title>
    <link href="https://amosbaby.github.io/2016/12/19/tableview%E7%9B%B8%E5%85%B3%E7%94%A8%E6%B3%95%E5%92%8C%E9%97%AE%E9%A2%98/"/>
    <id>https://amosbaby.github.io/2016/12/19/tableview相关用法和问题/</id>
    <published>2016-12-19T08:22:02.000Z</published>
    <updated>2016-12-22T09:35:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-去除某个tableviewCell的分割线"><a href="#1-去除某个tableviewCell的分割线" class="headerlink" title="1. 去除某个tableviewCell的分割线"></a>1. 去除某个tableviewCell的分割线</h3><blockquote>
<p>有时候部分tableviewCell不需要分割线，有些需要，这个时候可以给指定类的cell</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-(void)addSubview:(UIView *)view&#123;</div><div class="line">    if (![view isKindOfClass:[NSClassFromString(@&quot;_UITableViewCellSeparatorView&quot;) class]] &amp;&amp; view) &#123;</div><div class="line">        [super addSubview:view];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="2-viewForHeaderInSection-的section从1开始而不是从0开始"><a href="#2-viewForHeaderInSection-的section从1开始而不是从0开始" class="headerlink" title="2. viewForHeaderInSection 的section从1开始而不是从0开始"></a>2. viewForHeaderInSection 的section从1开始而不是从0开始</h3><blockquote>
<p>使用 -(UIView <em>)tableView:(UITableView </em>)tableView viewForHeaderInSection:(NSInteger)section 时发现section是从1开始而不是从0，最后查看API的时候发现原文中说道：</p>
<blockquote>
<p>This method only works correctly when tableView:heightForHeaderInSection: is also implemented.这个方法只有当tableView:heightForHeaderInSection:实现的时候才能正确执行。</p>
</blockquote>
<p>好吧，确实是一个天坑，谨记了。。。。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-(CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section&#123;</div><div class="line">    return 44;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>就好了</p>
<h3 id="3-tableView设置UITableViewStyleGrouped顶部有空余高度"><a href="#3-tableView设置UITableViewStyleGrouped顶部有空余高度" class="headerlink" title="3. tableView设置UITableViewStyleGrouped顶部有空余高度"></a>3. tableView设置UITableViewStyleGrouped顶部有空余高度</h3><blockquote>
<p>tableView 有两种UITableViewStyle ：</p>
<blockquote>
<ul>
<li>UITableViewStylePlain 普通(默认值)</li>
<li>UITableViewStyleGrouped 分组<br>默认情况下plain时第一行cell的上边界是和导航条（屏幕顶端）紧贴着的。如果你改成了grouped的话，就会有一个默认的间隙，这个间隙是scrollView（tableview也是一种）在导航栏下的自动缩进—个人理解，如果不对请指正。</li>
</ul>
</blockquote>
</blockquote>
<p>我尝试过如下方法：</p>
<ul>
<li>设置一个空的tableviewheader:  不行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.tableView.tableHeaderView = [[UIView alloc] initWithFrame:CGRectZero];</div></pre></td></tr></table></figure>
<ul>
<li>设置第一个section的sectionHeader/FooterHeight 为0.01（<strong>iOS中设置为0相当于没设置！</strong>）也不行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">-(CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section&#123;</div><div class="line">    return  0.01;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section&#123;</div><div class="line">    return 0.01;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>####最终还是用设置contentInset收拾了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.tableView.contentInset = UIEdgeInsetsMake(-35, 0, 0, 0);</div></pre></td></tr></table></figure>
<blockquote>
<p>目前还没弄明白为啥会这样，先放在这里做个笔记，以后好用。。。。，如果哪位知道请告知我一下，多谢。。。</p>
</blockquote>
<h3 id="4-tableview删除指定的section"><a href="#4-tableview删除指定的section" class="headerlink" title="4. tableview删除指定的section"></a>4. tableview删除指定的section</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-去除某个tableviewCell的分割线&quot;&gt;&lt;a href=&quot;#1-去除某个tableviewCell的分割线&quot; class=&quot;headerlink&quot; title=&quot;1. 去除某个tableviewCell的分割线&quot;&gt;&lt;/a&gt;1. 去除某个tableviewCell的分割线&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;有时候部分tableviewCell不需要分割线，有些需要，这个时候可以给指定类的cell&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;-(void)addSubview:(UIView *)view&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (![view isKindOfClass:[NSClassFromString(@&amp;quot;_UITableViewCellSeparatorView&amp;quot;) class]] &amp;amp;&amp;amp; view) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        [super addSubview:view];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="tableview, UI" scheme="https://amosbaby.github.io/tags/tableview-UI/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://amosbaby.github.io/2016/12/19/OC%20UI%E6%80%BB%E7%BB%93/"/>
    <id>https://amosbaby.github.io/2016/12/19/OC UI总结/</id>
    <published>2016-12-19T06:41:03.000Z</published>
    <updated>2016-12-19T08:21:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OC-UI总结之–tableview相关用法和问题"><a href="#OC-UI总结之–tableview相关用法和问题" class="headerlink" title="OC UI总结之–tableview相关用法和问题"></a>OC UI总结之–tableview相关用法和问题</h1><h3 id="1-去除某个tableviewCell的分割线"><a href="#1-去除某个tableviewCell的分割线" class="headerlink" title="1. 去除某个tableviewCell的分割线"></a>1. 去除某个tableviewCell的分割线</h3><blockquote>
<p>有时候部分tableviewCell不需要分割线，有些需要，这个时候可以给指定类的cell</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-(void)addSubview:(UIView *)view&#123;</div><div class="line">    if (![view isKindOfClass:[NSClassFromString(@&quot;_UITableViewCellSeparatorView&quot;) class]] &amp;&amp; view) &#123;</div><div class="line">        [super addSubview:view];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-viewForHeaderInSection-的section从1开始而不是从0开始"><a href="#2-viewForHeaderInSection-的section从1开始而不是从0开始" class="headerlink" title="2. viewForHeaderInSection 的section从1开始而不是从0开始"></a>2. viewForHeaderInSection 的section从1开始而不是从0开始</h3><blockquote>
<p>使用 -(UIView <em>)tableView:(UITableView </em>)tableView viewForHeaderInSection:(NSInteger)section 时发现section是从1开始而不是从0，最后查看API的时候发现原文中说道：</p>
<blockquote>
<p>This method only works correctly when tableView:heightForHeaderInSection: is also implemented.这个方法只有当tableView:heightForHeaderInSection:实现的时候才能正确执行。</p>
</blockquote>
<p>好吧，确实是一个天坑，谨记了。。。。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-(CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section&#123;</div><div class="line">    return 44;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>就好了</p>
<h3 id="3-tableView设置UITableViewStyleGrouped顶部有空余高度"><a href="#3-tableView设置UITableViewStyleGrouped顶部有空余高度" class="headerlink" title="3. tableView设置UITableViewStyleGrouped顶部有空余高度"></a>3. tableView设置UITableViewStyleGrouped顶部有空余高度</h3><blockquote>
<p>tableView 有两种UITableViewStyle ：</p>
<blockquote>
<ul>
<li>UITableViewStylePlain 普通(默认值)</li>
<li>UITableViewStyleGrouped 分组<br>默认情况下plain时第一行cell的上边界是和导航条（屏幕顶端）紧贴着的。如果你改成了grouped的话，就会有一个默认的间隙，这个间隙是scrollView（tableview也是一种）在导航栏下的自动缩进—个人理解，如果不对请指正。</li>
</ul>
</blockquote>
</blockquote>
<p>我尝试过如下方法：</p>
<ul>
<li>设置一个空的tableviewheader:  不行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.tableView.tableHeaderView = [[UIView alloc] initWithFrame:CGRectZero];</div></pre></td></tr></table></figure>
<ul>
<li>设置第一个section的sectionHeader/FooterHeight 为0.01（<strong>iOS中设置为0相当于没设置！</strong>）也不行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">-(CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section&#123;</div><div class="line">    return  0.01;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section&#123;</div><div class="line">    return 0.01;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>####最终还是用设置contentInset收拾了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.tableView.contentInset = UIEdgeInsetsMake(-35, 0, 0, 0);</div></pre></td></tr></table></figure>
<blockquote>
<p>目前还没弄明白为啥会这样，先放在这里做个笔记，以后好用。。。。，如果哪位知道请告知我一下，多谢。。。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;OC-UI总结之–tableview相关用法和问题&quot;&gt;&lt;a href=&quot;#OC-UI总结之–tableview相关用法和问题&quot; class=&quot;headerlink&quot; title=&quot;OC UI总结之–tableview相关用法和问题&quot;&gt;&lt;/a&gt;OC UI总结之–ta
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>网站开发者工具和知识（for 零基础）</title>
    <link href="https://amosbaby.github.io/2016/12/13/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E5%92%8C%E7%9F%A5%E8%AF%86/"/>
    <id>https://amosbaby.github.io/2016/12/13/前端开发者工具和知识/</id>
    <published>2016-12-13T02:28:09.000Z</published>
    <updated>2016-12-13T06:40:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-开发者工具"><a href="#1-开发者工具" class="headerlink" title="1. 开发者工具"></a>1. 开发者工具</h2><ul>
<li><a href="https://www.yinxiang.com/download/" target="_blank" rel="external">印象笔记</a>      方便快速存取想要想要记录的事情</li>
<li><a href="http://www.williamlong.info/archives/4319.html" target="_blank" rel="external">markDown</a>     文档编辑–优美的布局和方便的书写</li>
<li><a href="http://baike.baidu.com/item/Sublime%20Text/6284835?fromtitle=Sublime&amp;fromid=8130415&amp;type=syn" target="_blank" rel="external">sublime</a>         编辑器</li>
<li>chrome         浏览器–网站开发调试很方便，可以查看源码和调试js代码</li>
</ul>
<a id="more"></a>
<h2 id="2-需要学习的知识"><a href="#2-需要学习的知识" class="headerlink" title="2. 需要学习的知识"></a>2. 需要学习的知识</h2><ul>
<li>html        基本语法和概念</li>
<li>css         页面布局</li>
<li>jQuery    dom操作，页面响应</li>
<li>ajax        数据访问</li>
<li>http请求的 基本构成</li>
</ul>
<h2 id="3-常用的网站"><a href="#3-常用的网站" class="headerlink" title="3. 常用的网站"></a>3. 常用的网站</h2><ul>
<li>github     代码开源分享（纯英文）<ul>
<li><a href="https://github.com" target="_blank" rel="external">https://github.com</a> </li>
</ul>
</li>
<li>简书        文章博客书写发布<ul>
<li><a href="http://www.jianshu.com" target="_blank" rel="external">http://www.jianshu.com</a></li>
</ul>
</li>
<li>CSDN        文章博客书写发布<ul>
<li><a href="http://bbs.csdn.net/home" target="_blank" rel="external">http://bbs.csdn.net/home</a> </li>
</ul>
</li>
<li>w3cSchool 基础技术知识学习<ul>
<li>html基础 <a href="http://www.w3school.com.cn/html/" target="_blank" rel="external">http://www.w3school.com.cn/html/</a>  </li>
<li>js基础 <a href="http://www.w3school.com.cn/b.asp" target="_blank" rel="external">http://www.w3school.com.cn/b.asp</a></li>
<li>css基础 <a href="http://www.runoob.com/css/css-tutorial.html" target="_blank" rel="external">http://www.runoob.com/css/css-tutorial.html</a></li>
<li>http基础 <a href="http://www.runoob.com/http/http-tutorial.html" target="_blank" rel="external">http://www.runoob.com/http/http-tutorial.html</a></li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-开发者工具&quot;&gt;&lt;a href=&quot;#1-开发者工具&quot; class=&quot;headerlink&quot; title=&quot;1. 开发者工具&quot;&gt;&lt;/a&gt;1. 开发者工具&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.yinxiang.com/download/&quot;&gt;印象笔记&lt;/a&gt;      方便快速存取想要想要记录的事情&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.williamlong.info/archives/4319.html&quot;&gt;markDown&lt;/a&gt;     文档编辑–优美的布局和方便的书写&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://baike.baidu.com/item/Sublime%20Text/6284835?fromtitle=Sublime&amp;amp;fromid=8130415&amp;amp;type=syn&quot;&gt;sublime&lt;/a&gt;         编辑器&lt;/li&gt;
&lt;li&gt;chrome         浏览器–网站开发调试很方便，可以查看源码和调试js代码&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>开发者好用的工具和知识</title>
    <link href="https://amosbaby.github.io/2016/12/13/%E5%BC%80%E5%8F%91%E8%80%85%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E5%92%8C%E7%9F%A5%E8%AF%86/"/>
    <id>https://amosbaby.github.io/2016/12/13/开发者好用的工具和知识/</id>
    <published>2016-12-13T01:32:15.000Z</published>
    <updated>2016-12-13T01:32:15.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>opencart安装时step3遇到的mysql no such file or dictionary问题</title>
    <link href="https://amosbaby.github.io/2016/12/01/%20opencart_problemin_step3/"/>
    <id>https://amosbaby.github.io/2016/12/01/ opencart_problemin_step3/</id>
    <published>2016-12-01T11:40:43.000Z</published>
    <updated>2016-12-06T01:21:50.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在mac os（serria 10.12）上配置opencart时的第三步遇到了 no such file or directory的错误，如下图<br><img src="http://ohi37paqz.bkt.clouddn.com/blog/opencart-install-step3Snip20161201_1.png" alt="error image"></p>
</blockquote>
<p><strong>问题分析：</strong></p>
<blockquote>
<p>这应该是php在定位mysql的sock时找错了位置，这个问题<br>stackoverflow上给了一个解决办法，链接如右: <a href="http://stackoverflow.com/questions/4219970/warning-mysql-connect-2002-no-such-file-or-directory-trying-to-connect-vi" target="_blank" rel="external">php 连接mysql 显示no such file or dictinary问题解决方案</a></p>
</blockquote>
<p>其实就是php.ini配置的sock路径错了，只需要把路径纠正一下就好了.</p>
<a id="more"></a>
<p>以下是详细步骤：</p>
<h4 id="1-首先检查一下是否有-tmp-mysql-sock-而没有-var-mysql-mysql-sock，然后执行一下操作"><a href="#1-首先检查一下是否有-tmp-mysql-sock-而没有-var-mysql-mysql-sock，然后执行一下操作" class="headerlink" title="1.首先检查一下是否有/tmp/mysql.sock 而没有/var/mysql/mysql.sock，然后执行一下操作"></a>1.首先检查一下是否有/tmp/mysql.sock 而没有/var/mysql/mysql.sock，然后执行一下操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cd /var</div><div class="line">sudo mkdir mysql</div><div class="line">sudo chmod 755 mysql</div><div class="line">cd mysql</div><div class="line">sudo ln -s /tmp/mysql.sock mysql.sock</div></pre></td></tr></table></figure>
<h4 id="2-重启Apache服务"><a href="#2-重启Apache服务" class="headerlink" title="2. 重启Apache服务"></a>2. 重启Apache服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apachectl restart</div></pre></td></tr></table></figure>
<h4 id="3-如果上述步骤仍然不对，那么就要查看一下php-ini文件是否配置正确。一般php在mac-os安装好后，php-ini文件在-etc-php-ini处，如果没有那应该是php-ini-default-把这货改成php-ini就好了"><a href="#3-如果上述步骤仍然不对，那么就要查看一下php-ini文件是否配置正确。一般php在mac-os安装好后，php-ini文件在-etc-php-ini处，如果没有那应该是php-ini-default-把这货改成php-ini就好了" class="headerlink" title="3. 如果上述步骤仍然不对，那么就要查看一下php.ini文件是否配置正确。一般php在mac os安装好后，php.ini文件在/etc/php.ini处，如果没有那应该是php.ini.default, 把这货改成php.ini就好了"></a>3. 如果上述步骤仍然不对，那么就要查看一下<strong><em>php.ini</em></strong>文件是否配置正确。一般php在mac os安装好后，php.ini文件在/etc/php.ini处，如果没有那应该是php.ini.default, 把这货改成php.ini就好了</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/php.ini  -- 打开php.ini文件进行修改</div></pre></td></tr></table></figure>
<p>找到以下位置,并做如下修改-/tmp/mysql.sock是mysql的sock正确寻址位置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pdo_mysql.default_socket=/tmp/mysql.sock</div><div class="line">mysql.default_socket=/tmp/mysql.sock</div><div class="line">mysqli.default_socket = /tmp/mysql.sock</div></pre></td></tr></table></figure>
<h4 id="4-重启Apache服务"><a href="#4-重启Apache服务" class="headerlink" title="4.重启Apache服务"></a>4.重启Apache服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apachectl restart</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在mac os（serria 10.12）上配置opencart时的第三步遇到了 no such file or directory的错误，如下图&lt;br&gt;&lt;img src=&quot;http://ohi37paqz.bkt.clouddn.com/blog/opencart-install-step3Snip20161201_1.png&quot; alt=&quot;error image&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;问题分析：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这应该是php在定位mysql的sock时找错了位置，这个问题&lt;br&gt;stackoverflow上给了一个解决办法，链接如右: &lt;a href=&quot;http://stackoverflow.com/questions/4219970/warning-mysql-connect-2002-no-such-file-or-directory-trying-to-connect-vi&quot;&gt;php 连接mysql 显示no such file or dictinary问题解决方案&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实就是php.ini配置的sock路径错了，只需要把路径纠正一下就好了.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>项目遇到的问题</title>
    <link href="https://amosbaby.github.io/2016/11/28/%E9%A1%B9%E7%9B%AE%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://amosbaby.github.io/2016/11/28/项目遇到的问题/</id>
    <published>2016-11-28T03:24:07.000Z</published>
    <updated>2016-11-28T03:31:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-AVAudioRecorder录音和AVAudioPlayer播放的音频声音很小"><a href="#1-AVAudioRecorder录音和AVAudioPlayer播放的音频声音很小" class="headerlink" title="1. AVAudioRecorder录音和AVAudioPlayer播放的音频声音很小"></a>1. AVAudioRecorder录音和AVAudioPlayer播放的音频声音很小</h2><p><strong>解决方案</strong></p>
<blockquote>
<p>在调用AVAudioPlayer的播放方法前，加入如下代码：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">UInt32 doChangeDefaultRoute = 1;</div><div class="line">AudioSessionSetProperty(kAudioSessionProperty_OverrideCategoryDefaultToSpeaker,sizeof(doChangeDefaultRoute), &amp;doChangeDefaultRoute);</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="2-上传到APP-Store时遇到-URL-Scheme的问题"><a href="#2-上传到APP-Store时遇到-URL-Scheme的问题" class="headerlink" title="2. 上传到APP Store时遇到 URL Scheme的问题"></a>2. 上传到APP Store时遇到 URL Scheme的问题</h2><blockquote>
<p>The following URL schemes found in your app are not in the correct format:[12345678]. URL schemes need to begin with an alphabetic character,and be comprised of alphanumeric characters, the period, the hyphen or the plus sign only. Please see RFC 1738 for more detail.</p>
</blockquote>
<h3 id="这个问题是在-项目-gt-info-gt-URL-Types-对应的位置没有按照字母-数字-即对应的appid-的格式书写"><a href="#这个问题是在-项目-gt-info-gt-URL-Types-对应的位置没有按照字母-数字-即对应的appid-的格式书写" class="headerlink" title="这个问题是在 项目-&gt;info-&gt;URL Types 对应的位置没有按照字母+数字(即对应的appid)的格式书写"></a>这个问题是在 项目-&gt;info-&gt;URL Types 对应的位置没有按照<strong>字母+数字(即对应的appid)</strong>的格式书写</h3><p> 例如上述的url scheme 对应的是腾讯QQ，原来填的12345678要填写成tencent12345678</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-AVAudioRecorder录音和AVAudioPlayer播放的音频声音很小&quot;&gt;&lt;a href=&quot;#1-AVAudioRecorder录音和AVAudioPlayer播放的音频声音很小&quot; class=&quot;headerlink&quot; title=&quot;1. AVAudioRecorder录音和AVAudioPlayer播放的音频声音很小&quot;&gt;&lt;/a&gt;1. AVAudioRecorder录音和AVAudioPlayer播放的音频声音很小&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;解决方案&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在调用AVAudioPlayer的播放方法前，加入如下代码：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;UInt32 doChangeDefaultRoute = 1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;AudioSessionSetProperty(kAudioSessionProperty_OverrideCategoryDefaultToSpeaker,sizeof(doChangeDefaultRoute), &amp;amp;doChangeDefaultRoute);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="分类" scheme="https://amosbaby.github.io/categories/%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="问题" scheme="https://amosbaby.github.io/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>swift字符串处理小实贱</title>
    <link href="https://amosbaby.github.io/2016/11/08/swift%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86%E5%B0%8F%E5%AE%9E%E8%B4%B1/"/>
    <id>https://amosbaby.github.io/2016/11/08/swift字符串处理小实贱/</id>
    <published>2016-11-08T09:06:45.000Z</published>
    <updated>2016-11-08T09:22:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>背景： 最近开始系统的学习swift，发现swift的String类型的操作并没有ObjectC中那么简单。</p>
</blockquote>
<h3 id="区别如下：（也许我的见解会有误差，如有不对敬请告知）"><a href="#区别如下：（也许我的见解会有误差，如有不对敬请告知）" class="headerlink" title="区别如下：（也许我的见解会有误差，如有不对敬请告知）"></a>区别如下：（也许我的见解会有误差，如有不对敬请告知）</h3><hr>
<ol>
<li><p>OC中取一个字符串的长度（字符个数，官方说明the individual characters of composed character sequences）可以使用 <strong><em>str.length</em></strong> 就可以了，而swift使用 <strong><em>tr.characters.count</em></strong> </p>
</li>
<li><p>OC中获取字符串的子串一般使用 <strong><em>substringWithRange:</em></strong>，<strong><em>substringFromIndex</em></strong> ,  <strong><em>substringToIndex</em></strong> 就可以了，而swift中String类型直接是没有对应的方法的</p>
</li>
</ol>
<a id="more"></a>
<blockquote>
<p>以前都是伸手党，这次认真的学习swift，打算戒掉什么都依赖别人的坏习惯，于是真对上述两点自己写了 <strong>String类型的extension，其中包括了获取String字符个数和子串的便捷方法，如果不对，请告知，共同进步</strong></p>
</blockquote>
<h2 id="有如下方法："><a href="#有如下方法：" class="headerlink" title="有如下方法："></a>有如下方法：</h2><ol>
<li>获取字符串的字符个数–也就是长度 : 属性length，可以用OC同样的方式调用</li>
<li><p>根据下标数字获取字符串对应的String.Index : </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getIndex(index: Int) -&gt; String.Index</div></pre></td></tr></table></figure>
</li>
<li><p>根据指定下标和指定的偏移量获取字符串对应的String.Index :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getIndex(index: String.Index, length: Int) -&gt; String.Index</div></pre></td></tr></table></figure>
</li>
<li><p>根据指定起始下标获取String类型的子字符串 : </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getSubString(fromIndex:Int, toIndex:Int) -&gt; String</div></pre></td></tr></table></figure>
</li>
<li><p>根据开始下标和长度(偏移量)获取String的子字符串 : <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getSubString(fromIndex:Int,length:Int) -&gt; String</div></pre></td></tr></table></figure></p>
</li>
</ol>
<p>代码如下：</p>
<hr>
<pre><code>extension String{

    /// 获取字符串的字符个数--也就是长度
    var length : Int {
        get{
            return self.lengthOfBytes(using: String.Encoding.utf8)
//            return self.characters.count
        }
    }


    /// 根据下标数字获取字符串对应的String.Index
    ///
    /// - parameter index: 字符串数值下标
    ///
    /// - returns: String.Index
    func getIndex(index: Int) -&gt; String.Index {
        return self.index(self.startIndex, offsetBy: index , limitedBy: self.endIndex) ??  self.endIndex
    }


    /// 根据指定下标和指定的偏移量获取字符串对应的String.Index
    ///
    /// - parameter index:  指定的String.Index
    /// - parameter length:
    ///
    /// - returns: 偏移量
    func getIndex(index: String.Index, length: Int) -&gt; String.Index {
        return self.index(index, offsetBy: length, limitedBy: self.endIndex) ??  self.endIndex
    }


    /// 根据指定起始下标获取String类型的子字符串
    ///
    /// - parameter fromIndex: 开始下标
    /// - parameter toIndex:   结束下标
    ///
    /// - returns: 对应的字符串
    func getSubString(fromIndex:Int, toIndex:Int) -&gt; String {

        var str: String = &quot;&quot;
        let si = self.getIndex(index: fromIndex)
        let ti = self.getIndex(index: toIndex)
        for index in self.characters.indices {

            if index &gt;= si &amp;&amp; index &lt;= ti {
                str.append(self[index])
            }


        }
        return str
    }


    /// 根据开始下标和长度(偏移量)获取String的子字符串
    ///
    /// - parameter fromIndex: 开始下标
    /// - parameter length:    所取长度
    ///
    /// - returns: 子字符串
    func getSubString(fromIndex:Int,length:Int) -&gt; String {

        var str: String = &quot;&quot;
        let si = self.getIndex(index: fromIndex)
        let ti = self.getIndex(index: si, length:length)
        for index in self.characters.indices {

            if index &gt;= si &amp;&amp; index &lt;= ti {
                str.append(self[index])
            }


        }
        return str
    }
}
</code></pre><p>写到这儿，不管这些方法实用不实用，心里也很有成就感，按照自己的理解去做，去实现。欢迎批评指正。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;背景： 最近开始系统的学习swift，发现swift的String类型的操作并没有ObjectC中那么简单。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;区别如下：（也许我的见解会有误差，如有不对敬请告知）&quot;&gt;&lt;a href=&quot;#区别如下：（也许我的见解会有误差，如有不对敬请告知）&quot; class=&quot;headerlink&quot; title=&quot;区别如下：（也许我的见解会有误差，如有不对敬请告知）&quot;&gt;&lt;/a&gt;区别如下：（也许我的见解会有误差，如有不对敬请告知）&lt;/h3&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;OC中取一个字符串的长度（字符个数，官方说明the individual characters of composed character sequences）可以使用 &lt;strong&gt;&lt;em&gt;str.length&lt;/em&gt;&lt;/strong&gt; 就可以了，而swift使用 &lt;strong&gt;&lt;em&gt;tr.characters.count&lt;/em&gt;&lt;/strong&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OC中获取字符串的子串一般使用 &lt;strong&gt;&lt;em&gt;substringWithRange:&lt;/em&gt;&lt;/strong&gt;，&lt;strong&gt;&lt;em&gt;substringFromIndex&lt;/em&gt;&lt;/strong&gt; ,  &lt;strong&gt;&lt;em&gt;substringToIndex&lt;/em&gt;&lt;/strong&gt; 就可以了，而swift中String类型直接是没有对应的方法的&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="swift" scheme="https://amosbaby.github.io/categories/swift/"/>
    
    
  </entry>
  
  <entry>
    <title>手势密码 swift3.0版</title>
    <link href="https://amosbaby.github.io/2016/11/08/%E6%89%8B%E5%8A%BF%E5%AF%86%E7%A0%81-swift3-0%E7%89%88/"/>
    <id>https://amosbaby.github.io/2016/11/08/手势密码-swift3-0版/</id>
    <published>2016-11-08T01:57:02.000Z</published>
    <updated>2016-11-08T06:01:29.000Z</updated>
    
    <content type="html"><![CDATA[<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->
<!-- 其中 class="blockquote-center" 是必须的 -->
  <blockquote class="blockquote-center">人生的两大悲剧：一是踌躇满志，一是万念俱灰!</blockquote>

<blockquote>
<p>闲来无事学习swift3.0，顺手写了个手势密码的demo来巩固一下. 代码中自定义了两个类，一个是NumberButton用来控制Button的，一个是GesturePasswordView，是用来显示密码面板的。绘图部分就是在GesturePasswordView上进行的。下面直接上代码，代码中有相关的注释，代码也比较简单。</p>
</blockquote>
<h2 id="1、NumberButton的定义"><a href="#1、NumberButton的定义" class="headerlink" title="1、NumberButton的定义"></a>1、NumberButton的定义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class NumberButton: UIButton &#123;</div><div class="line">    </div><div class="line">    override init(frame: CGRect) &#123;</div><div class="line">        super.init(frame: frame)</div><div class="line">        self .setup()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    required init?(coder aDecoder: NSCoder) &#123;</div><div class="line">        fatalError(&quot;init(coder:) has not been implemented&quot;)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    func setup()&#123;</div><div class="line">        </div><div class="line">        self.layer.borderColor = UIColor.green.cgColor</div><div class="line">        self.layer.borderWidth = 5</div><div class="line">        self.layer.cornerRadius = self.width * 0.5</div><div class="line">        self.layer.masksToBounds = true</div><div class="line">        self.isUserInteractionEnabled = false</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="2、GesturePasswordView-定义"><a href="#2、GesturePasswordView-定义" class="headerlink" title="2、GesturePasswordView 定义"></a>2、GesturePasswordView 定义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div></pre></td><td class="code"><pre><div class="line">class GesturePasswordView: UIView &#123;</div><div class="line">    //路径</div><div class="line">    var path:UIBezierPath =  UIBezierPath()</div><div class="line">    //父控制器</div><div class="line">    weak var controller:UIViewController?</div><div class="line">    //存储已经路过的点</div><div class="line">    var pointsArr = [CGPoint]()</div><div class="line">    </div><div class="line">    //当前手指所在点</div><div class="line">    var fingurePoint:CGPoint!</div><div class="line">    //密码存储</div><div class="line">    var passwordArr : [Int] = [Int]()</div><div class="line">    //提供给其他类获取密码字符串</div><div class="line">    var password:String&#123;</div><div class="line">        get&#123;</div><div class="line">            var str = &quot;&quot;</div><div class="line">            for p in passwordArr&#123;</div><div class="line">                str.append(String(p))</div><div class="line">            &#125;</div><div class="line">            return str</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    override init(frame: CGRect) &#123;</div><div class="line">        super.init(frame: frame)</div><div class="line">        self .setup()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    convenience init(frame: CGRect, controller:UIViewController) &#123;</div><div class="line">        self.init(frame: frame)</div><div class="line">        self.controller = controller</div><div class="line">        self.setup()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    required init?(coder aDecoder: NSCoder) &#123;</div><div class="line">        fatalError(&quot;init(coder:) has not been implemented&quot;)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //MARK: -初始化</div><div class="line">    func setup()&#123;</div><div class="line">        // TODO: 创建视图</div><div class="line">        self.backgroundColor = .cyan</div><div class="line">        let colNum = 3</div><div class="line">        var col = 0,row = 0</div><div class="line">        </div><div class="line">        let width:CGFloat = 60.0</div><div class="line">        let height:CGFloat = width</div><div class="line">        </div><div class="line">        var x:CGFloat = 0</div><div class="line">        var y:CGFloat = 0</div><div class="line">        </div><div class="line">        </div><div class="line">        /// 计算空隙</div><div class="line">        let space = (self.width - CGFloat(colNum) * width) / 4</div><div class="line">        </div><div class="line">        for index in 0..&lt;9&#123;</div><div class="line">            //计算当前所在行</div><div class="line">            col = index % colNum</div><div class="line">            row = index / colNum</div><div class="line">            //计算坐标</div><div class="line">            x = CGFloat(col) * width + CGFloat(col + 1) * space</div><div class="line">            y = CGFloat(row) * width + CGFloat(row + 1) * space</div><div class="line">            let button = NumberButton(frame: CGRect(x: x, y: y, width: width, height: height))</div><div class="line">            </div><div class="line">            button.tag = index</div><div class="line">            </div><div class="line">            self.addSubview(button)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //MARK: 初始化路径</div><div class="line">        self.path.lineWidth = 10</div><div class="line">        self.path.lineCapStyle = .round</div><div class="line"></div><div class="line">        self.path.lineJoinStyle = .round</div><div class="line">        UIColor.black.setStroke()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">   </div><div class="line">    override func touchesBegan(_ touches: Set&lt;UITouch&gt;, with event: UIEvent?) &#123;</div><div class="line">       </div><div class="line">        //每次点击移除所有存储过的点，重新统计</div><div class="line">        self.pointsArr.removeAll()</div><div class="line">        </div><div class="line">        self.touchChanged(touch: touches.first!)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    override func touchesMoved(_ touches: Set&lt;UITouch&gt;, with event: UIEvent?) &#123;</div><div class="line">        </div><div class="line">        self.touchChanged(touch: touches.first!)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //MARK: 触摸变化时的方法</div><div class="line">    func touchChanged(touch:UITouch)&#123;</div><div class="line">        let point = touch.location(in: self)</div><div class="line">        </div><div class="line">        self.fingurePoint = point</div><div class="line">        </div><div class="line">        for button in self.subviews&#123;</div><div class="line">            </div><div class="line">            if button.isKind(of: NumberButton.self) &amp;&amp; !self.pointsArr.contains(button.center) &amp;&amp; button.frame.contains(point)&#123;</div><div class="line">                </div><div class="line">                //记录已经走过的点</div><div class="line">                self.passwordArr.append(button.tag)</div><div class="line">                </div><div class="line">                //记录密码</div><div class="line">                self.pointsArr.append(button.center)</div><div class="line">                //设置按钮的背景色为红色</div><div class="line">                button.backgroundColor  =  UIColor.red</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        //会调用draw 方法</div><div class="line">        self.setNeedsDisplay()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    override func touchesEnded(_ touches: Set&lt;UITouch&gt;, with event: UIEvent?) &#123;</div><div class="line">        </div><div class="line">        let alertVC = UIAlertController(title: &quot;您的密码是:&quot;, message: &quot;\(passwordArr)&quot;, preferredStyle: .alert)</div><div class="line">        </div><div class="line">        let action = UIAlertAction(title: &quot;取消&quot;, style: UIAlertActionStyle.cancel, handler: &#123;</div><div class="line">            _ in</div><div class="line">            //移除存储的密码</div><div class="line">           self.passwordArr.removeAll()</div><div class="line">            UIView.animate(withDuration: 0.25, delay: 1, options: UIViewAnimationOptions.curveEaseInOut, animations:</div><div class="line">                &#123;</div><div class="line">                    //移除所有的记录</div><div class="line">                    self.pointsArr.removeAll()</div><div class="line">                    self.path.removeAllPoints()</div><div class="line">                    self.setNeedsDisplay()</div><div class="line">                    self.fingurePoint = CGPoint.zero</div><div class="line">                    </div><div class="line">                    //清除所有按钮的选中状态</div><div class="line">                    for button in self.subviews&#123;</div><div class="line">                        </div><div class="line">                        if button.isKind(of: NumberButton.self) &#123;</div><div class="line">        </div><div class="line">                            button.backgroundColor  =  UIColor.clear</div><div class="line"></div><div class="line">                        &#125;</div><div class="line">                        </div><div class="line">                    &#125;</div><div class="line">            &#125;, completion: nil)</div><div class="line">        &#125;)</div><div class="line">        </div><div class="line">        //弹出提示框</div><div class="line">        alertVC.addAction(action)</div><div class="line">        self.controller?.present(alertVC, animated: true, completion: nil)</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //MARK: 绘制</div><div class="line">    override func draw(_ rect: CGRect) &#123;</div><div class="line">       self.path.removeAllPoints()</div><div class="line">        for (index,point) in self.pointsArr.enumerated()&#123;</div><div class="line">            </div><div class="line">            if index == 0&#123;</div><div class="line">                self.path.move(to: point)</div><div class="line">            &#125;else&#123;</div><div class="line">                self.path.addLine(to: point)</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        //让画线跟随手指</div><div class="line">        if self.fingurePoint != CGPoint.zero &amp;&amp; self.pointsArr.count &gt; 0&#123;</div><div class="line">            self.path.addLine(to: self.fingurePoint)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        self.path.stroke()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>其中我提供了一个队UIView的frame下size，origin，x，y，width，height属性的快捷访问方法，实现如下:</p>
</blockquote>
<h2 id="3、UIView下size，origin，x，y，width，height属性的快捷访问方法"><a href="#3、UIView下size，origin，x，y，width，height属性的快捷访问方法" class="headerlink" title="3、UIView下size，origin，x，y，width，height属性的快捷访问方法"></a>3、UIView下size，origin，x，y，width，height属性的快捷访问方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">extension UIView&#123;</div><div class="line">    </div><div class="line">    var size:CGSize &#123;</div><div class="line">         get&#123;</div><div class="line">            return self.frame.size</div><div class="line">        &#125;</div><div class="line">         set&#123;</div><div class="line">            self.frame.size = newValue</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    var origin: CGPoint &#123;</div><div class="line">         get&#123;</div><div class="line">            return self.frame.origin</div><div class="line">        &#125;</div><div class="line">         set&#123;</div><div class="line">            self.frame.origin = newValue</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    var width:CGFloat&#123;</div><div class="line">         get&#123;</div><div class="line">            return self.size.width</div><div class="line">        &#125;</div><div class="line">        set&#123;</div><div class="line">            self.size.width = newValue</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    var height:CGFloat&#123;</div><div class="line">         get&#123;</div><div class="line">            return self.size.height</div><div class="line">        &#125;</div><div class="line">        set&#123;</div><div class="line">            self.size.height = newValue</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    var x:CGFloat&#123;</div><div class="line">        get&#123;</div><div class="line">            return self.origin.x</div><div class="line">        &#125;</div><div class="line">        set&#123;</div><div class="line">            self.origin.x = newValue</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    var y:CGFloat&#123;</div><div class="line">        get&#123;</div><div class="line">            return self.origin.y</div><div class="line">        &#125;</div><div class="line">        set&#123;</div><div class="line">            self.origin.y = newValue</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;
&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;
  &lt;blockquote class=&quot;blockquote-center&quot;&gt;人生的两大悲剧：一是踌躇满志，一是万念俱灰!&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;闲来无事学习swift3.0，顺手写了个手势密码的demo来巩固一下. 代码中自定义了两个类，一个是NumberButton用来控制Button的，一个是GesturePasswordView，是用来显示密码面板的。绘图部分就是在GesturePasswordView上进行的。下面直接上代码，代码中有相关的注释，代码也比较简单。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1、NumberButton的定义&quot;&gt;&lt;a href=&quot;#1、NumberButton的定义&quot; class=&quot;headerlink&quot; title=&quot;1、NumberButton的定义&quot;&gt;&lt;/a&gt;1、NumberButton的定义&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;class NumberButton: UIButton &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    override init(frame: CGRect) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        super.init(frame: frame)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self .setup()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    required init?(coder aDecoder: NSCoder) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        fatalError(&amp;quot;init(coder:) has not been implemented&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    func setup()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.layer.borderColor = UIColor.green.cgColor&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.layer.borderWidth = 5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.layer.cornerRadius = self.width * 0.5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.layer.masksToBounds = true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.isUserInteractionEnabled = false&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="swift" scheme="https://amosbaby.github.io/categories/swift/"/>
    
    
      <category term="swift" scheme="https://amosbaby.github.io/tags/swift/"/>
    
      <category term="绘图" scheme="https://amosbaby.github.io/tags/%E7%BB%98%E5%9B%BE/"/>
    
      <category term="手势" scheme="https://amosbaby.github.io/tags/%E6%89%8B%E5%8A%BF/"/>
    
      <category term="密码" scheme="https://amosbaby.github.io/tags/%E5%AF%86%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>swift学习笔记（一）</title>
    <link href="https://amosbaby.github.io/2016/11/07/2016-11-08/"/>
    <id>https://amosbaby.github.io/2016/11/07/2016-11-08/</id>
    <published>2016-11-07T12:39:35.000Z</published>
    <updated>2016-11-08T05:07:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-协议"><a href="#1-协议" class="headerlink" title="1.协议"></a>1.协议</h2><ol>
<li>使用<strong>protocol</strong>来声明一个协议</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">protocol TestProtocol&#123;</div><div class="line">   var description:String&#123;get&#125;</div><div class="line">   </div><div class="line">   mutating func printDescritpion()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><ol>
<li>Classes, enumerations,和 structs都可以继承一个协议</li>
</ol>
<a id="more"></a>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class TestClass:TestProtocol&#123;</div><div class="line">    var description: String = &quot;TestClass&quot;</div><div class="line">    </div><div class="line">    var length: Int  &#123;</div><div class="line">        get&#123;/Users/amos/source/_posts/swift学习笔记（一）.md</div><div class="line">            return self.description.characters.count</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    func printDescritpion() &#123;</div><div class="line">        self.description += &quot;---\(length)&quot;</div><div class="line">        print(self.description + &quot; \(length)&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">TestClass().printDescritpion()</div><div class="line"></div><div class="line">struct TestStruct: TestProtocol&#123;</div><div class="line">    var sum  = 1024</div><div class="line">    var description: String = &quot;TestStuct&quot;</div><div class="line">    </div><div class="line">    mutating func printDescritpion() &#123;</div><div class="line">        self.description += &quot;---\(sum)&quot;</div><div class="line">        print(self.description)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><h2 id="2-extension-–-扩展"><a href="#2-extension-–-扩展" class="headerlink" title="2. extension – 扩展"></a>2. extension – 扩展</h2><blockquote>
<p>可以给自定义的类，或已有的cocoa框架提供的类，甚至类库或者框架里面的类添加 新的 <em>**属性（成员变量）或者 方法</em></p>
</blockquote>
<ol>
<li><p>给已有的类添加</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">extension String:TestProtocol&#123;</div><div class="line">    var description : String&#123;</div><div class="line">        return &quot;the string is \(self)&quot;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    mutating func printDescritpion() &#123;</div><div class="line">        self += &quot; fuck you&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>给自定义的类添加</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">	extension TestClass&#123;</div><div class="line">    func eat()&#123;</div><div class="line">        print(&quot;吃饭饭&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="3-Diffrence-between-Function-and-Generic-Function-in-swift"><a href="#3-Diffrence-between-Function-and-Generic-Function-in-swift" class="headerlink" title="3. Diffrence between Function and Generic Function in swift"></a>3. Diffrence between Function and Generic Function in swift</h2><h3 id="普通function与泛型function之间的区别"><a href="#普通function与泛型function之间的区别" class="headerlink" title="普通function与泛型function之间的区别"></a>普通function与泛型function之间的区别</h3><blockquote>
<p>swift中的泛型function 有助于提升代码的安全性 </p>
</blockquote>
<p><a href="http://stackoverflow.com/questions/24378452/diffrence-between-function-and-generic-function-in-swift" target="_blank" rel="external">stackoverflow.上的一个很好的帖子有助于理解</a></p>
<h2 id="4-类的初始化"><a href="#4-类的初始化" class="headerlink" title="4.类的初始化"></a>4.类的初始化</h2><blockquote>
<p>举例说明：Person类有两个 属性： name 和 age，Student 类继承了Person类，并添加了一个 stuNo(学号)的属性，此时自定义Student 初始化函数时想要初始化stuNo，要在调用super.init（）之前设置stuNo的值</p>
</blockquote>
<ul>
<li>代码如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class Person&#123;</div><div class="line">    var name:String?</div><div class="line">    var age : Int</div><div class="line"></div><div class="line">    init(name: String, age: Int) &#123;</div><div class="line">        self.name = name</div><div class="line">        self.age = age</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">class Student:Person&#123;</div><div class="line">    var stuNo: Int</div><div class="line">    let gender  : Int // 可以在init中初始化该常量</div><div class="line">    init(name:String, age: Int, stuNo:Int) &#123;</div><div class="line">        /**</div><div class="line">            如果常量gender和变量stuNo的初始化放在super.init之后会提示error</div><div class="line">         </div><div class="line">         */</div><div class="line">        self.stuNo = stuNo</div><div class="line">        self.gender = 0</div><div class="line">        super.init(name: name, age: age)</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-协议&quot;&gt;&lt;a href=&quot;#1-协议&quot; class=&quot;headerlink&quot; title=&quot;1.协议&quot;&gt;&lt;/a&gt;1.协议&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;使用&lt;strong&gt;protocol&lt;/strong&gt;来声明一个协议&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;protocol TestProtocol&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   var description:String&amp;#123;get&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   mutating func printDescritpion()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;Classes, enumerations,和 structs都可以继承一个协议&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="日记" scheme="https://amosbaby.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="swift" scheme="https://amosbaby.github.io/tags/swift/"/>
    
  </entry>
  
</feed>
